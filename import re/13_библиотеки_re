13_библиотеки_re 
существует несколько методов для работы с регулярными выражениями
1. Поиск подстроки в строке (search match)
2. Поиск всех подходящих строк (findall, finditer)
3. Разделение строки на подстроки (split)
4. Замена части строки (sub)   # рисунок 13_1

re.search (pattern, string,flags=0)  # рисунок 13_2
Возвращается в падающую часть строки и останавливается сразу же как находит первое совпадение
Если шаблон найден возвращается None 
Как правило его используют чисто для проверки выражения на соответствие

Получить текст из определенной группы можно с помощью метода m.group(0) в который передается номер группы


Пример. Давайте получим из текста имя человека и месяц его рождения # рисунок 13_3
Создаем переменную , переходи в код  # 13_библиотеки.py


re.match
re.match (pattern, string,flags=0) # 13_re.match.py
re.match - тоже самое что и re.search только поиск происходит в начале строки, а не по всей строке 

re.sub
re.search (pattern, repl, string, count=0, flags=0)  # 13_re.sub.py
В данном методе шаблон сопостовляется с заданной строкой и если подстрока найдена 
она заменяется нна переданную нами другую строку


re.split 
re.split (pattern, string, maxsplit=0, flags=0) # 13_re.split.py
Разделяет строку на части опираясь на символ разделитель и возвращается список подстрок


re.findall
Вовзращает все совпадения с шаблоном , который встречается в строке , при этом строка проверяется от начала и до конца
совпадения возвращаются в том порядке они идут в исходной строке
возвращаемое значение может ыбть  либо спсом строк совпавшим с шаблоном
либо пустым списком если совпадение не нашлось
(важно - возвращется именно список строк)
прменя метод re.findall мы не сможем работать с группами